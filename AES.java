import java.util.*;
public class Project2 {
private int[] s_box_modified; private int[][] MixColumn;
public Project2() {
s_box_modified = new int[] {
99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118,
202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192,
81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210,
4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117,
9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132,
83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207,
208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168,
183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21,
205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115,
96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219,
224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121,
231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8,
186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138,
112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158,
225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223,
140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22 };
MixColumn = new int[][] {
{ 2, 3, 1, 1 },
{ 1, 2, 3, 1 },
{ 1, 1, 2, 3 },
{ 3, 1, 1, 2 } };
}
private int[] Logarithm = { 0x0, 0x0, 0x19, 0x1, 0x32, 0x2, 0x1a, 0xc6, 0x4b,
0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x3, 0x64, 0x4, 0xe0, 0xe,
0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x8, 0xc8, 0xf8, 0x69, 0x1c,
0xc1, 0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4,
0xa6, 0x72, 0x9a, 0xc9, 0x9, 0x78, 0x65, 0x2f, 0x8a, 0x5, 0x21,
0xf, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35, 0x93, 0xda, 0x8e,
0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2,
0xf1, 0x40, 0x46, 0x83, 0x38, 0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x6,
0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10, 0x7e,
0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54,
0xfa, 0x85, 0x3d, 0xba, 0x2b, 0x79, 0xa, 0x15, 0x9b, 0x9f, 0x5e,
0xca, 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57, 0xaf, 0x58,
0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7,
0xe6, 0xad, 0xe8, 0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0xb, 0xf5,
0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0, 0x7f, 0xc, 0xf6,
0x6f, 0x17, 0xc4, 0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76,
0x7b, 0xb7, 0xcc, 0xbb, 0x3e, 0x5a, 0xfb, 0x60, 0xb1, 0x86, 0x3b,
0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d, 0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b,
0xd1, 0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab, 0x44, 0x11, 0x92, 0xd9, 0x23,
0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5,
0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0xd, 0x63, 0x8c,
0x80, 0xc0, 0xf7, 0x70, 0x7 };
private int[] AntiLogarithm = { 0x1, 0x3, 0x5, 0xf, 0x11, 0x33, 0x55, 0xff, 0x1a,
0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13, 0x35, 0x5f, 0xe1, 0x38, 0x48,
0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x2, 0x6, 0xa, 0x1e, 0x22, 0x66,
0xaa, 0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe,
0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31, 0x53, 0xf5, 0x4, 0xc, 0x14,
0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 0x6e, 0xb2, 0xcd,
0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1,
0x8, 0x18, 0x28, 0x78, 0x88, 0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd,
0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a, 0xb5,
0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0xb, 0x1d, 0x27, 0x69,
0xbb, 0xd6, 0x61, 0xa3, 0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad,
0xec, 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0, 0xfb, 0x16,
0x3a, 0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa,
0x15, 0x3f, 0x41, 0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0,
0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75, 0x9f, 0xba, 0xd5,
0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e,
0x89, 0x80, 0x9b, 0xb6, 0xc1, 0x58, 0xe8, 0x23, 0x65, 0xaf, 0xea,
0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54, 0xfc, 0x1f, 0x21, 0x63,
0xa5, 0xf4, 0x7, 0x9, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46,
0xca, 0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3,
0x3e, 0x42, 0xc6, 0x51, 0xf3, 0xe, 0x12, 0x36, 0x5a, 0xee, 0x29,
0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0xd, 0x17,
0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c,
0xb4, 0xc7, 0x52, 0xf6, 0x1 };
private int FiniteMultiply(int a, int b) {
if (a != 0 && b != 0)
{ return (AntiLogarithm[(Logarithm[a & 0xFF] + Logarithm[b & 0xFF]) % 255]);
}
else
{ return (0);
}
}
private int[] R_Con = { 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x1b,
0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6,
0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91 };
public void aes_ecryption(int[][] plaintext, int[][] key) {
int[][] key_matrix = new int[4][50];
for (int i = 0; i < key_matrix.length; i++) {
for (int j = 0; j < key_matrix.length; j++) {
key_matrix[i][j] = key[i][j];
}
}
for (int j = 4; j < 50; j++) {
for (int i = 0; i < 4; i++) {
if (j % 4 == 0) {
key_matrix[i][j] = key_matrix[(i + 1) % 4][j - 1];
key_matrix[i][j] = s_box_modified[key_matrix[i][j]];
if (i == 0) {
key_matrix[i][j] = key_matrix[i][j]^ R_Con[(j / 4) - 1];
}
key_matrix[i][j] = key_matrix[i][j - 4]^ key_matrix[i][j];
}
else {
key_matrix[i][j] = key_matrix[i][j - 4]
^ key_matrix[i][j - 1];
}
}
}
int[][] ciphertext = plaintext, round_key = key;
int[][] tmp = new int[4][4];
// Round 0
for (int i = 0; i < ciphertext.length; i++) {
for (int j = 0; j < ciphertext.length; j++) {
ciphertext[i][j] = round_key[i][j] ^ plaintext[i][j];
}
}
// Round 1 to 10
for (int round = 1; round <= 10; round++) {
// byte sub
for (int i = 0; i < ciphertext.length; i++) {
for (int j = 0; j < ciphertext.length; j++) {
ciphertext[i][j] = s_box_modified[ciphertext[i][j]];
}
}
// Shift Row
tmp = new int[4][4];
for (int i = 0; i < ciphertext.length; i++) {
for (int j = 0; j < ciphertext.length; j++) {
tmp[i][j] = ciphertext[i][(j + i) % 4];
}
}
ciphertext = tmp;
// mix column
if (round != 10)
{
tmp = new int[4][4];
for (int i = 0; i < ciphertext.length; i++) {
for (int j = 0; j < ciphertext.length; j++) {
for (int k = 0; k < ciphertext.length; k++) {
tmp[i][j] = tmp[i][j] ^
FiniteMultiply(MixColumn[i][k], ciphertext[k][j]);
}
}
}
ciphertext = tmp;
}
// key schedule
for (int i = 0; i < round_key.length; i++) {
for (int j = 0; j < round_key.length; j++) {
round_key[i][j] = key_matrix[i][4 * round + j];
}
}
// ARK
for (int i = 0; i < ciphertext.length; i++) {
for (int j = 0; j < ciphertext.length; j++) {
ciphertext[i][j] = round_key[i][j] ^ ciphertext[i][j];
}
}
System.out.println("Round " + round);
System.out.println("--------");
System.out.print("Key : ");
for (int i = 0; i < round_key.length; i++) {
for (int j = 0; j < round_key.length; j++) {
System.out.print(Integer.toHexString(round_key[j][i]) + " ");
}
}
System.out.println();
System.out.print("Output : ");
for (int i = 0; i < ciphertext.length; i++) {
for (int j = 0; j < ciphertext.length; j++) {
System.out.print(Integer.toHexString(ciphertext[j][i]) + " ");
}
}
System.out.println();
System.out.println();
}
System.out.println("-------------------------------------------------------------------"); }
public static void main(String[] args) {
int[][] plaintext = new int[][] { { 0x00, 0x00, 0x00, 0x00 },
{ 0x00, 0x00, 0x00, 0x00 }, { 0x00, 0x00, 0x00, 0xab },
{ 0x00, 0x00, 0x00, 0xcc } };
int[][] key = new int[][] { { 0x1a, 0x87, 0xb7, 0x93 },
{ 0x0c, 0x54, 0x08, 0x0f }, { 0x24, 0x93, 0x0e, 0x56 },
{ 0xf2, 0xbc, 0x43, 0x7c } };
System.out.println("-------------------------------------------------------------------");
System.out.println(" ID1 = 104513622 (Manjinder Kaur)");
System.out.println(" ID1 = 104511507 (Prerna Garg)");
System.out.println(" ID1 = 104515253 (Rosy Rambani)");
System.out.println();
System.out.println(" Group Code (A,B) = (2,7) ");
System.out.println(" Assigned Plaintext and Key:");
System.out.println("0000 0000 0000 0000 0000 0000 0000 abcc (plaintext)");
System.out.println("1a0c 24f2 8754 93bc b708 0e43 930f 567c (key)");
System.out.println("-------------------------------------------------------------------");
Project2 aes = new Project2();
aes.aes_ecryption(plaintext, key);
}
}